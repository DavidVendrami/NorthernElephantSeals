initialize() {
	initializeMutationRate(2.7e-10); //Set this to have U = 1.2
	
	//defineConstant("Nm", 0.3);	// reative frequency of neutral mutations
	defineConstant("LDm", 0.95);	// reative frequency of LD mutations
	defineConstant("HDm", 0.05);	// reative frequency of HD mutations
	defineConstant("del_mut", 1001);
	// m1 mutation type: neutral

	///////////  A big thank you to Hernan E. Morales for sharing his SLiM code model effect sizes! ########
	//initializeMutationType("m1", 0.5, "f", 0.0); // Neutral mutations
	//initializeMutationType("m2", 0.45, "g", -0.01,0.2); // Mildly deleterious mutations (slightly recessive)
	//m2.convertToSubstitution = F; // Retain fixed "m2" mutations
	//initializeMutationType("m3", 0.01, "n", -1, 0.01); // Highly deleterious mutations (fully recessive)
	//m3.convertToSubstitution = F; // Retain fixed "m2" mutations
	// Distribution and paramters for m2 and m3 chosen so that the distribution effect of deleterious mutations is strongly bimodal. 
	m2_gamma=sort(rgamma(1e6,0.04,0.2));
	m2_gamma[(1e6*0.95):(1e6-1)]=1;
	m2_gamma=m2_gamma*-1;
	m2_gamma[m2_gamma<(-1)]=(-1);
	m2_bins=seq(min(m2_gamma),max(m2_gamma),length=asInteger(del_mut));
	prop=c();
	mtype=c();
	s=c();
	i=0;
	for (i in 0:(length(m2_bins)-2))
	{
		propX=length(m2_gamma[m2_bins[i]<=m2_gamma&m2_bins[i+1]>=m2_gamma])/length(m2_gamma);
		prop=c(prop,propX);
		sX=mean(c(m2_bins[i],m2_bins[i+1]));
		s=c(s,sX);
		mtype=c(mtype,"m"+i);
	}
	s[s<(-1)]=(-1);
	h=0.5*10^(13*s);
	
	for (i in 0:(length(m2_bins)-2))
	{
		initializeMutationType(i, h[i], "f", asFloat(s[i]));
		}
	
	// g1 genomic element type: uses m1 for all mutations
	// initializeGenomicElementType("g1", c(m1,m2,m3), c(0.3,0.665,0.035)); // !!! This is absolutely fundamental !!! Graur, D. An upper limit on the functional fraction 		of the human genome. Genome Biol.Evol. 9, 18801885 (2017)

	//initializeGenomicElementType("g2", c(m1),0.02);
	
	initializeGenomicElementType("g1", 0:(del_mut-2), prop); // !!! This is absolutely fundamental !!!
	
	initializeGenomicElement(g1, 0, 2184605547); // !!! Need to change this to something more appropriate !!!	
	ends=c(111871330,111871331,251547378,251547379,417272540,417272541,561663406,561663407,749681569,749681570,835133943,835133944,964042349,964042350,1049596993,1049596994,1104517511,1104517512,1157967553,1157967554,1259179298,1259179299,1436633411,1436633412,1568930140,1568930141,1768492140,1768492141,1866478667,1866478668,2002101750,2002101751,2184605547);
	rates=c(1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8,0.5,1e-8);
	initializeRecombinationRate(rates,ends); // Important!!! Decrease for shorter genomes
	
	initializeSex("A");
	// Separate sexes
}

// create a population of 267 individuals (NeLGM) and let it run for 3000 generations to accumulate mutations.
1 {
	sim.mutationTypes.convertToSubstitution=F;
	sim.addSubpop("p1", 706, 0.5); // Set the sex ration appropriately!!!
}

// Heres the exponential post LGM expansion, leading to NePreBot
7000:8552 {
t = sim.generation - 7000;
p1_size = round(706 * exp(0.00181655*t));
p1.setSubpopulationSize(asInteger(p1_size));
}

// Start Bottleneck
9077 {
p1.setSubpopulationSize(2);
}

// End bottleneck
//4083 {
//p1.setSubpopulationSize(2746);
//}

// Heres the exponential post bott expansion, leading to NePostBot
9083:9100 {
t = sim.generation - 9083;
p1_size = round(2 * exp(0.4733453*t));
p1.setSubpopulationSize(asInteger(p1_size));
}

9076 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3076.txt");
}

9077 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3077.txt");
}

9078 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3078.txt");
}

9079 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3079.txt");
}

9080 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3080.txt");
}

9081 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3081.txt");
}

9082 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3082.txt");
}

9083 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3083.txt");
}

9084 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3084.txt");
}

9085 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3085.txt");
}

9086 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3086.txt");
}

9087 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3087.txt");
}

9088 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3088.txt");
}

9089 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3089.txt");
}

9090 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3090.txt");
}

9091 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3091.txt");
}

9092 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3092.txt");
}

9093 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3093.txt");
}

9094 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3094.txt");
}

9095 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3095.txt");
}

9096 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3096.txt");
}

9097 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3097.txt");
}

9098 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3098.txt");
}

9099 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3099.txt");
}

9100 late() {
//neut=sim.countOfMutationsOfType(m1);
//ld=sim.countOfMutationsOfType(m2);
//hd=sim.countOfMutationsOfType(m3);
//catn("LD: " + ld + "; HD: " + hd);
sim.outputFull(filePath="/prj/furseal-genome/David/NES/SLiM/SLiM_3.7.1/WF/WGS_10/rep_1/gen_3100.txt");
}
